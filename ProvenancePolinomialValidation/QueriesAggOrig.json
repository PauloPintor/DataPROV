{
	"1": {
	"originalquery": "select l_returnflag, l_linestatus, sum(l_quantity) as sum_qty, sum(l_extendedprice) as sum_base_price, sum(l_extendedprice * (1 - l_discount)) as sum_disc_price, sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) as sum_charge, avg(l_quantity) as avg_qty, avg(l_extendedprice) as avg_price, avg(l_discount) as avg_disc, count(*) as count_order from lineitem where l_shipdate <= TO_DATE('1998-09-14', 'YYYY-MM-DD') group by l_returnflag, l_linestatus order by l_returnflag, l_linestatus;",
	"provenancequery": "SELECT l_returnflag, l_linestatus, STRING_AGG(CONCAT('(',lineitem.prov, ')', ' ⊗ ', l_quantity), ' +sum ' ORDER BY l_returnflag) AS sum_qty, STRING_AGG(CONCAT('(',lineitem.prov, ')', ' ⊗ ', l_extendedprice), ' +sum ' ORDER BY l_returnflag) AS sum_base_price, STRING_AGG(CONCAT('(',lineitem.prov, ')', ' ⊗ ', l_extendedprice * (1 - l_discount)), ' +sum ' ORDER BY l_returnflag) AS sum_disc_price, STRING_AGG(CONCAT('(',lineitem.prov, ')', ' ⊗ ', l_extendedprice * (1 - l_discount) * (1 + l_tax)), ' +sum ' ORDER BY l_returnflag) AS sum_charge, REPLACE(STRING_AGG(CONCAT(lineitem.prov, ' ⊗ ', l_quantity,'/avgt'), ' +avg ' ORDER BY l_returnflag), 'avgt', CAST(COUNT(*) AS VARCHAR)) AS avg_qty, REPLACE(STRING_AGG(CONCAT(lineitem.prov, ' ⊗ ', l_extendedprice,'/avgt'), ' +avg ' ORDER BY l_returnflag), 'avgt', CAST(COUNT(*) AS VARCHAR)) AS avg_price, REPLACE(STRING_AGG(CONCAT(lineitem.prov, ' ⊗ ', l_discount,'/avgt'), ' +avg ' ORDER BY l_returnflag), 'avgt', CAST(COUNT(*) AS VARCHAR)) AS avg_disc, STRING_AGG(CONCAT('(',lineitem.prov, ')', ' ⊗ ', '1'), ' +count ' ORDER BY l_returnflag) AS count_order, CONCAT('δ(',STRING_AGG(lineitem.prov, ' + ' ORDER BY l_returnflag),')') AS prov, COUNT(*) cntprov FROM lineitem WHERE l_shipdate <= TO_DATE('1998-09-14', 'YYYY-MM-DD') GROUP BY l_returnflag, l_linestatus ORDER BY l_returnflag, l_linestatus",
	"columns": ["l_returnflag", "l_linestatus"],
	"columnsagg": ["sum_qty", "sum_base_price", "sum_disc_price", "sum_charge", "avg_qty", "avg_price", "avg_disc", "count_order"],
	"tables": ["lineitem"]
  	},
	"2":{
		"originalquery": "select partsupp.ps_partkey, min(partsupp.ps_supplycost) as f0 from partsupp, supplier, nation, region where supplier.s_suppkey = partsupp.ps_suppkey and supplier.s_nationkey = nation.n_nationkey and nation.n_regionkey = region.r_regionkey and region.r_name = 'ASIA' GROUP BY partsupp.ps_partkey",
		"provenancequery": "SELECT partsupp.ps_partkey, STRING_AGG(CONCAT('(',partsupp.prov || ' . ' || supplier.prov || ' . ' || nation.prov || ' . ' || region.prov, ')', ' ⊗ ', partsupp.ps_supplycost), ' +min ') AS F0, CONCAT('δ(',STRING_AGG(partsupp.prov || ' . ' || supplier.prov || ' . ' || nation.prov || ' . ' || region.prov, ' + '),')') AS prov, COUNT(*) cntprov FROM partsupp INNER JOIN supplier ON supplier.s_suppkey = partsupp.ps_suppkey INNER JOIN nation ON supplier.s_nationkey = nation.n_nationkey INNER JOIN region ON nation.n_regionkey = region.r_regionkey WHERE region.r_name = 'ASIA' GROUP BY partsupp.ps_partkey",
		"columns": ["partsupp.ps_partkey"],
		"columnsagg": ["f0"],
		"tables": ["partsupp", "supplier", "nation", "region"]
	},
	"3": {
	  "originalquery": "select supplier.s_acctbal, supplier.s_name, nation.n_name, part.p_partkey, part.p_mfgr, supplier.s_address, supplier.s_phone, supplier.s_comment from part, supplier, partsupp, nation, region where part.p_partkey = partsupp.ps_partkey and supplier.s_suppkey = partsupp.ps_suppkey and part.p_size = 33 and part.p_type like '%BRASS' and supplier.s_nationkey = nation.n_nationkey and nation.n_regionkey = region.r_regionkey and region.r_name = 'ASIA' and partsupp.ps_supplycost = (select min(partsupp.ps_supplycost) from partsupp, supplier, nation, region where part.p_partkey = partsupp.ps_partkey and supplier.s_suppkey = partsupp.ps_suppkey and supplier.s_nationkey = nation.n_nationkey and nation.n_regionkey = region.r_regionkey and region.r_name = 'ASIA') order by supplier.s_acctbal desc, nation.n_name, supplier.s_name, part.p_partkey LIMIT 100;",
	  "provenancequery": "SELECT supplier.s_acctbal, supplier.s_name, nation.n_name, part.p_partkey, part.p_mfgr, supplier.s_address, supplier.s_phone, supplier.s_comment, part.prov || ' . ' || partsupp.prov || ' . ' || supplier.prov || ' . ' || nation.prov || ' . ' || region.prov || ' . ' || '(' || C0.prov || ')'||' . [' || C0.F0|| '= 1 ⊗' || partsupp.ps_supplycost|| ']' AS prov FROM part INNER JOIN partsupp ON part.p_partkey = partsupp.ps_partkey INNER JOIN supplier ON supplier.s_suppkey = partsupp.ps_suppkey INNER JOIN nation ON supplier.s_nationkey = nation.n_nationkey INNER JOIN region ON nation.n_regionkey = region.r_regionkey INNER JOIN (SELECT partsupp.ps_partkey, STRING_AGG(CONCAT('(',partsupp.prov || ' . ' || supplier.prov || ' . ' || nation.prov || ' . ' || region.prov, ')', ' ⊗ ', partsupp.ps_supplycost), ' +min ') AS F0, CONCAT('δ(',STRING_AGG(partsupp.prov || ' . ' || supplier.prov || ' . ' || nation.prov || ' . ' || region.prov, ' + '),')') AS prov FROM partsupp INNER JOIN supplier ON supplier.s_suppkey = partsupp.ps_suppkey INNER JOIN nation ON supplier.s_nationkey = nation.n_nationkey INNER JOIN region ON nation.n_regionkey = region.r_regionkey WHERE region.r_name = 'ASIA' GROUP BY partsupp.ps_partkey) AS C0 ON part.p_partkey = C0.ps_partkey WHERE part.p_size = 33 AND part.p_type LIKE '%BRASS' AND region.r_name = 'ASIA' ORDER BY supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey LIMIT 100",
	  "columns": ["supplier.s_acctbal", "supplier.s_name", "nation.n_name", "part.p_partkey", "part.p_mfgr", "supplier.s_address", "supplier.s_phone", "supplier.s_comment"],
	  "columnsagg": [],
	  "tables": ["part", "supplier", "partsupp", "nation", "region", "partsupp", "supplier", "nation", "region"]
	},
	"4":{
		"originalquery": "select lineitem.l_orderkey, sum(lineitem.l_extendedprice * (1 - lineitem.l_discount)) as revenue, orders.o_orderdate, orders.o_shippriority from customer, orders, lineitem where customer.c_mktsegment = 'FURNITURE' and customer.c_custkey = orders.o_custkey and lineitem.l_orderkey = orders.o_orderkey and orders.o_orderdate < date '1995-03-17' and lineitem.l_shipdate > date '1995-03-17' group by lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority order by revenue desc, orders.o_orderdate",
		"provenancequery": "SELECT lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority, STRING_AGG(CONCAT('(',customer.prov || ' . ' || orders.prov || ' . ' || lineitem.prov, ')', ' ⊗ ', lineitem.l_extendedprice * (1 - lineitem.l_discount)), ' +sum ' ORDER BY lineitem.l_orderkey) AS revenue, CONCAT('δ(',STRING_AGG(customer.prov || ' . ' || orders.prov || ' . ' || lineitem.prov, ' + ' ORDER BY lineitem.l_orderkey),')') AS prov, COUNT(*) as cntprov FROM customer INNER JOIN orders ON customer.c_custkey = orders.o_custkey INNER JOIN lineitem ON lineitem.l_orderkey = orders.o_orderkey WHERE customer.c_mktsegment = 'FURNITURE' AND orders.o_orderdate < date '1995-03-17' AND lineitem.l_shipdate > date '1995-03-17' GROUP BY lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority ORDER BY revenue DESC, orders.o_orderdate",
		"columns": ["lineitem.l_orderkey", "orders.o_orderdate", "orders.o_shippriority"],
		"columnsagg": ["revenue"],
		"tables": ["customer", "orders", "lineitem"]
	},
	"5":{
		"originalquery": "select orders.o_orderpriority, count(*) as order_count from orders where orders.o_orderdate >= date '1995-08-01' and orders.o_orderdate < date '1995-08-01' + interval '3' month and exists (select * from lineitem where lineitem.l_orderkey = orders.o_orderkey and lineitem.l_commitdate < lineitem.l_receiptdate) group by orders.o_orderpriority order by orders.o_orderpriority;",
		"provenancequery": "SELECT orders.o_orderpriority, STRING_AGG(CONCAT('(',orders.prov || ' . ' || '(' || C0.prov || ')', ')', ' ⊗ ', '1'), ' +count ' ORDER BY orders.o_orderpriority) AS order_count, CONCAT('δ(',STRING_AGG(orders.prov || ' . ' || '(' || C0.prov || ')', ' + ' ORDER BY orders.o_orderpriority),')') AS prov, count(*) cntprov FROM orders INNER JOIN (SELECT nestedT0_2.o_orderkey, CASE WHEN nestedT0_2.cnt1 < nestedT0_2.cnt2 THEN nestedT0_2.prov ELSE STRING_AGG(nestedT0_2.prov, ' + ' ORDER BY nestedT0_2.o_orderkey) END AS prov FROM (SELECT nestedT0.o_orderkey, STRING_AGG(lineitem.prov, ' + ' ORDER BY nestedT0.o_orderkey) AS prov, COUNT(*) AS cnt1, COUNT(*) OVER (PARTITION BY nestedT0.o_orderkey ) AS cnt2 FROM lineitem INNER JOIN orders AS nestedT0 ON lineitem.l_orderkey = nestedT0.o_orderkey WHERE lineitem.l_commitdate < lineitem.l_receiptdate GROUP BY nestedT0.o_orderkey, nestedT0.prov) AS nestedT0_2 GROUP BY nestedT0_2.o_orderkey, nestedT0_2.cnt1, nestedT0_2.cnt2, nestedT0_2.prov) AS C0 ON C0.o_orderkey = orders.o_orderkey WHERE orders.o_orderdate >= date '1995-08-01' AND orders.o_orderdate < date '1995-08-01' + INTERVAL '3' month GROUP BY orders.o_orderpriority ORDER BY orders.o_orderpriority",
		"columns": ["orders.o_orderpriority"],
		"columnsagg": ["order_count"],
		"tables": ["orders", "lineitem"]
	},
	"6":{
		"originalquery": "select nation.n_name, sum(lineitem.l_extendedprice * (1 - lineitem.l_discount)) as revenue from customer, orders, lineitem, supplier, nation, region where customer.c_custkey = orders.o_custkey and lineitem.l_orderkey = orders.o_orderkey and lineitem.l_suppkey = supplier.s_suppkey and customer.c_nationkey = supplier.s_nationkey and supplier.s_nationkey = nation.n_nationkey and nation.n_regionkey = region.r_regionkey and region.r_name = 'EUROPE' and orders.o_orderdate >= date '1993-01-01' and orders.o_orderdate < date '1993-01-01' + interval '1' year group by nation.n_name order by revenue desc;",
		"provenancequery": "SELECT nation.n_name, STRING_AGG(CONCAT('(',customer.prov || ' . ' || orders.prov || ' . ' || lineitem.prov || ' . ' || supplier.prov || ' . ' || nation.prov || ' . ' || region.prov, ')', ' ⊗ ', lineitem.l_extendedprice * (1 - lineitem.l_discount)), ' +sum ' ORDER BY nation.n_name) AS revenue, CONCAT('δ(',STRING_AGG(customer.prov || ' . ' || orders.prov || ' . ' || lineitem.prov || ' . ' || supplier.prov || ' . ' || nation.prov || ' . ' || region.prov, ' + ' ORDER BY nation.n_name),')') AS prov, count(*) cntprov FROM customer INNER JOIN orders ON customer.c_custkey = orders.o_custkey INNER JOIN lineitem ON lineitem.l_orderkey = orders.o_orderkey INNER JOIN supplier ON lineitem.l_suppkey = supplier.s_suppkey AND customer.c_nationkey = supplier.s_nationkey INNER JOIN nation ON supplier.s_nationkey = nation.n_nationkey INNER JOIN region ON nation.n_regionkey = region.r_regionkey WHERE region.r_name = 'EUROPE' AND orders.o_orderdate >= date '1993-01-01' AND orders.o_orderdate < date '1993-01-01' + INTERVAL '1' year GROUP BY nation.n_name ORDER BY revenue DESC",
		"columns": ["nation.n_name"],
		"columnsagg": ["revenue"],
		"tables": ["customer", "orders", "lineitem", "supplier", "nation", "region"]
	},
	"7":{
		"originalquery": "select sum(lineitem.l_extendedprice * lineitem.l_discount) as revenue from lineitem where lineitem.l_shipdate >= date '1993-01-01' and lineitem.l_shipdate < date '1993-01-01' + interval '1' year and lineitem.l_discount between 0.09 - 0.01 and 0.09 + 0.01 and lineitem.l_quantity < 24;",
		"provenancequery": "SELECT STRING_AGG(CONCAT('(',lineitem.prov, ')', ' ⊗ ', lineitem.l_extendedprice * lineitem.l_discount), ' +sum ') AS revenue, CONCAT('δ(',STRING_AGG(lineitem.prov, ' + '),')') AS prov, count(*) cntprov FROM lineitem WHERE lineitem.l_shipdate >= date '1993-01-01' AND lineitem.l_shipdate < date '1993-01-01' + INTERVAL '1' year AND lineitem.l_discount BETWEEN 0.09 - 0.01 AND 0.09 + 0.01 AND lineitem.l_quantity < 24",
		"columns": [],
		"columnsagg": ["revenue"],
		"tables": ["lineitem"]
	},
	"8":{
		"originalquery": "select supp_nation, cust_nation, l_year, sum(volume) as revenue from (select n1.n_name as supp_nation, n2.n_name as cust_nation, extract(year from lineitem.l_shipdate) as l_year, lineitem.l_extendedprice * (1 - lineitem.l_discount) as volume from supplier, lineitem, orders, customer, nation n1, nation n2 where supplier.s_suppkey = lineitem.l_suppkey and orders.o_orderkey = lineitem.l_orderkey and customer.c_custkey = orders.o_custkey and supplier.s_nationkey = n1.n_nationkey and customer.c_nationkey = n2.n_nationkey and ((n1.n_name = 'RUSSIA' and n2.n_name = 'IRAN') or (n1.n_name = 'IRAN' and n2.n_name = 'RUSSIA')) and lineitem.l_shipdate between date '1995-01-01' and date '1996-12-31') as shipping group by supp_nation, cust_nation, l_year order by supp_nation, cust_nation, l_year;",
		"provenancequery": "SELECT supp_nation, cust_nation, l_year, STRING_AGG(CONCAT('(',shipping.prov  , ')', ' ⊗ ', volume), ' +sum ' ORDER BY supp_nation) AS revenue, CONCAT('δ(',STRING_AGG(shipping.prov  , ' + ' ORDER BY supp_nation),')') AS prov, COUNT(*) cntprov FROM (SELECT n1.n_name AS supp_nation, n2.n_name AS cust_nation, EXTRACT(year FROM lineitem.l_shipdate) AS l_year, lineitem.l_extendedprice * (1 - lineitem.l_discount) AS volume, supplier.prov || ' . ' || lineitem.prov || ' . ' || orders.prov || ' . ' || customer.prov || ' . ' || n1.prov || ' . ' || n2.prov AS prov FROM supplier INNER JOIN lineitem ON supplier.s_suppkey = lineitem.l_suppkey INNER JOIN orders ON orders.o_orderkey = lineitem.l_orderkey INNER JOIN customer ON customer.c_custkey = orders.o_custkey INNER JOIN nation n1 ON supplier.s_nationkey = n1.n_nationkey INNER JOIN nation n2 ON customer.c_nationkey = n2.n_nationkey WHERE ((n1.n_name = 'RUSSIA' AND n2.n_name = 'IRAN') OR (n1.n_name = 'IRAN' AND n2.n_name = 'RUSSIA')) AND lineitem.l_shipdate BETWEEN date '1995-01-01' AND date '1996-12-31') AS shipping GROUP BY supp_nation, cust_nation, l_year ORDER BY supp_nation, cust_nation, l_year",
		"columns": ["nation.n_name", "n1.n_name", "EXTRACT(year FROM lineitem.l_shipdate) AS l_year"],
		"columnsagg": ["revenue"],
		"tables": ["supplier", "lineitem", "orders", "customer", "nation", "nation"]
	},
	"9":{
		"originalquery": "select o_year, sum(case when nation = 'IRAN' then volume else 0 end) / sum(volume) as mkt_share from (select extract(year from orders.o_orderdate) as o_year, lineitem.l_extendedprice * (1 - lineitem.l_discount) as volume, n2.n_name as nation from part, supplier, lineitem, orders, customer, nation n1, nation n2, region where part.p_partkey = lineitem.l_partkey and supplier.s_suppkey = lineitem.l_suppkey and lineitem.l_orderkey = orders.o_orderkey and orders.o_custkey = customer.c_custkey and customer.c_nationkey = n1.n_nationkey and n1.n_regionkey = region.r_regionkey and region.r_name = 'MIDDLE EAST' and supplier.s_nationkey = n2.n_nationkey and orders.o_orderdate between date '1995-01-01' and date '1996-12-31' and part.p_type = 'STANDARD POLISHED STEEL') as all_nations group by o_year order by o_year;",
		"provenancequery": "SELECT o_year, STRING_AGG(CONCAT('(',all_nations.prov  , ')', ' ⊗ ', CASE WHEN nation = 'IRAN' THEN volume ELSE 0 END), ' +sum ' ORDER BY o_year) AS mkt_share, STRING_AGG(CONCAT('(',all_nations.prov  , ')', ' ⊗ ', volume), ' +sum ' ORDER BY o_year) AS mkt_share, CONCAT('δ(',STRING_AGG(all_nations.prov  , ' + ' ORDER BY o_year),')') AS prov, count(*) cntprov FROM (SELECT EXTRACT(year FROM orders.o_orderdate) AS o_year, lineitem.l_extendedprice * (1 - lineitem.l_discount) AS volume, n2.n_name AS nation, part.prov || ' . ' || lineitem.prov || ' . ' || supplier.prov || ' . ' || orders.prov || ' . ' || customer.prov || ' . ' || n1.prov || ' . ' || region.prov || ' . ' || n2.prov AS prov FROM part INNER JOIN lineitem ON part.p_partkey = lineitem.l_partkey INNER JOIN supplier ON supplier.s_suppkey = lineitem.l_suppkey INNER JOIN orders ON lineitem.l_orderkey = orders.o_orderkey INNER JOIN customer ON orders.o_custkey = customer.c_custkey INNER JOIN nation n1 ON customer.c_nationkey = n1.n_nationkey INNER JOIN region ON n1.n_regionkey = region.r_regionkey INNER JOIN nation n2 ON supplier.s_nationkey = n2.n_nationkey WHERE region.r_name = 'MIDDLE EAST' AND orders.o_orderdate BETWEEN date '1995-01-01' AND date '1996-12-31' AND part.p_type = 'STANDARD POLISHED STEEL') AS all_nations GROUP BY o_year ORDER BY o_year",
		"columns": ["extract(year from orders.o_orderdate) as o_year"],
		"columnsagg": ["mkt_share"],
		"tables": ["part", "supplier", "lineitem", "orders", "customer", "nation", "nation", "region"]
	},
	"10":{
		"originalquery": "select nation, o_year, sum(amount) as sum_profit from (select nation.n_name as nation, extract(year from orders.o_orderdate) as o_year, lineitem.l_extendedprice * (1 - lineitem.l_discount) - partsupp.ps_supplycost * lineitem.l_quantity as amount from part, supplier, lineitem, partsupp, orders, nation where supplier.s_suppkey = lineitem.l_suppkey and partsupp.ps_suppkey = lineitem.l_suppkey and partsupp.ps_partkey = lineitem.l_partkey and part.p_partkey = lineitem.l_partkey and orders.o_orderkey = lineitem.l_orderkey and supplier.s_nationkey = nation.n_nationkey and part.p_name like '%burlywood%') as profit group by nation, o_year order by nation, o_year desc;",
		"provenancequery": "SELECT nation, o_year, STRING_AGG(CONCAT('(',profit.prov  , ')', ' ⊗ ', amount), ' +sum ' ORDER BY nation) AS sum_profit, CONCAT('δ(',STRING_AGG(profit.prov  , ' + ' ORDER BY nation),')') AS prov, count(*) as cntprov FROM (SELECT nation.n_name AS nation, EXTRACT(year FROM orders.o_orderdate) AS o_year, lineitem.l_extendedprice * (1 - lineitem.l_discount) - partsupp.ps_supplycost * lineitem.l_quantity AS amount, part.prov || ' . ' || lineitem.prov || ' . ' || orders.prov || ' . ' || supplier.prov || ' . ' || partsupp.prov || ' . ' || nation.prov AS prov FROM part INNER JOIN lineitem ON part.p_partkey = lineitem.l_partkey INNER JOIN orders ON orders.o_orderkey = lineitem.l_orderkey INNER JOIN supplier ON supplier.s_suppkey = lineitem.l_suppkey INNER JOIN partsupp ON partsupp.ps_suppkey = lineitem.l_suppkey AND partsupp.ps_partkey = lineitem.l_partkey INNER JOIN nation ON supplier.s_nationkey = nation.n_nationkey WHERE part.p_name LIKE '%burlywood%') AS profit GROUP BY nation, o_year ORDER BY nation, o_year DESC",
		"columns": ["nation.n_name", "extract(year from orders.o_orderdate) as o_year"],
		"columnsagg": ["sum_profit"],
		"tables": ["part", "supplier", "lineitem", "partsupp", "orders", "nation"]
	},
	"11":{
		"originalquery": "select customer.c_custkey, customer.c_name, sum(lineitem.l_extendedprice * (1 - lineitem.l_discount)) as revenue, customer.c_acctbal, nation.n_name, customer.c_address, customer.c_phone, customer.c_comment from customer, orders, lineitem, nation where customer.c_custkey = orders.o_custkey and lineitem.l_orderkey = orders.o_orderkey and orders.o_orderdate >= date '1993-11-01' and orders.o_orderdate < date '1993-11-01' + interval '3' month and lineitem.l_returnflag = 'R' and customer.c_nationkey = nation.n_nationkey group by customer.c_custkey, customer.c_name, customer.c_acctbal, customer.c_phone, nation.n_name, customer.c_address, customer.c_comment order by revenue desc;",
		"provenancequery": "SELECT customer.c_custkey, customer.c_name, customer.c_acctbal, nation.n_name, customer.c_address, customer.c_phone, customer.c_comment, STRING_AGG(CONCAT('(',customer.prov || ' . ' || orders.prov || ' . ' || lineitem.prov || ' . ' || nation.prov, ')', ' ⊗ ', lineitem.l_extendedprice * (1 - lineitem.l_discount)), ' +sum ' ORDER BY customer.c_custkey) AS revenue, CONCAT('δ(',STRING_AGG(customer.prov || ' . ' || orders.prov || ' . ' || lineitem.prov || ' . ' || nation.prov, ' + ' ORDER BY customer.c_custkey),')') AS prov FROM customer INNER JOIN orders ON customer.c_custkey = orders.o_custkey INNER JOIN lineitem ON lineitem.l_orderkey = orders.o_orderkey INNER JOIN nation ON customer.c_nationkey = nation.n_nationkey WHERE orders.o_orderdate >= date '1993-11-01' AND orders.o_orderdate < date '1993-11-01' + INTERVAL '3' month AND lineitem.l_returnflag = 'R' GROUP BY customer.c_custkey, customer.c_name, customer.c_acctbal, customer.c_phone, nation.n_name, customer.c_address, customer.c_comment ORDER BY revenue DESC",
		"columns": ["customer.c_custkey", "customer.c_name", "customer.c_acctbal", "nation.n_name", "customer.c_address", "customer.c_phone", "customer.c_comment"],
		"columnsagg": ["revenue"],
		"tables": ["customer", "orders", "lineitem", "nation"]
	},
	"12":{
		"originalquery": "select partsupp.ps_partkey, sum(partsupp.ps_supplycost * partsupp.ps_availqty) as value from partsupp, supplier, nation where partsupp.ps_suppkey = supplier.s_suppkey and supplier.s_nationkey = nation.n_nationkey and nation.n_name = 'SAUDI ARABIA' group by partsupp.ps_partkey having sum(ps_supplycost * ps_availqty) > (select sum(partsupp.ps_supplycost * partsupp.ps_availqty) * 0.0010000000 from partsupp, supplier, nation where partsupp.ps_suppkey = supplier.s_suppkey and supplier.s_nationkey = nation.n_nationkey and nation.n_name = 'SAUDI ARABIA') order by value desc;",
		"provenancequery": "SELECT subHaving.ps_partkey, subHaving.value, subHaving.prov || ' . ' || '(' || C0.prov || ')' || ' . [' || subHaving.value || '>' || C0.col0 || ']' AS prov, subHaving.cntprov * C0.cntprov as cntprov FROM (SELECT partsupp.ps_partkey, STRING_AGG(CONCAT('(', partsupp.prov || ' . ' || supplier.prov || ' . ' || nation.prov, ')', ' ⊗ ', partsupp.ps_supplycost * partsupp.ps_availqty), ' +sum ' ORDER BY partsupp.ps_partkey) AS value, CONCAT('δ(', STRING_AGG(partsupp.prov || ' . ' || supplier.prov || ' . ' || nation.prov, ' + ' ORDER BY partsupp.ps_partkey), ')') AS prov, count(*) cntprov FROM partsupp INNER JOIN supplier ON partsupp.ps_suppkey = supplier.s_suppkey INNER JOIN nation ON supplier.s_nationkey = nation.n_nationkey WHERE nation.n_name = 'SAUDI ARABIA' GROUP BY partsupp.ps_partkey ORDER BY value DESC) AS subHaving CROSS JOIN (SELECT STRING_AGG(CONCAT('(', partsupp.prov || ' . ' || supplier.prov || ' . ' || nation.prov, ')', ' ⊗ ', partsupp.ps_supplycost * partsupp.ps_availqty * 0.0010000000), ' +sum ') AS col0, CONCAT('δ(', STRING_AGG(partsupp.prov || ' . ' || supplier.prov || ' . ' || nation.prov, ' + '), ')') AS prov, COUNT(*) cntprov FROM partsupp INNER JOIN supplier ON partsupp.ps_suppkey = supplier.s_suppkey INNER JOIN nation ON supplier.s_nationkey = nation.n_nationkey WHERE nation.n_name = 'SAUDI ARABIA') AS C0",
		"columns": ["partsupp.ps_partkey"],
		"columnsagg": ["value"],
		"tables": ["partsupp", "supplier", "nation", "partsupp", "supplier", "nation"]
	},	"13":{
		"originalquery": "select lineitem.l_shipmode, sum(case when orders.o_orderpriority = '1-URGENT' or orders.o_orderpriority = '2-HIGH' then 1 else 0 end) as high_line_count, sum(case when orders.o_orderpriority <> '1-URGENT' and orders.o_orderpriority <> '2-HIGH' then 1 else 0 end) as low_line_count from orders, lineitem where orders.o_orderkey = lineitem.l_orderkey and lineitem.l_shipmode in ('SHIP', 'MAIL') and lineitem.l_commitdate < lineitem.l_receiptdate and lineitem.l_shipdate < lineitem.l_commitdate and lineitem.l_receiptdate >= date '1996-01-01' and lineitem.l_receiptdate < date '1996-01-01' + interval '1' year group by lineitem.l_shipmode order by lineitem.l_shipmode;",
		"provenancequery": "SELECT lineitem.l_shipmode, STRING_AGG(CONCAT('(',orders.prov || ' . ' || lineitem.prov, ')', ' ⊗ ', CASE WHEN orders.o_orderpriority = '1-URGENT' OR orders.o_orderpriority = '2-HIGH' THEN 1 ELSE 0 END), ' +sum ' ORDER BY lineitem.l_shipmode) AS high_line_count, STRING_AGG(CONCAT('(',orders.prov || ' . ' || lineitem.prov, ')', ' ⊗ ', CASE WHEN orders.o_orderpriority <> '1-URGENT' AND orders.o_orderpriority <> '2-HIGH' THEN 1 ELSE 0 END), ' +sum ' ORDER BY lineitem.l_shipmode) AS low_line_count, CONCAT('δ(',STRING_AGG(orders.prov || ' . ' || lineitem.prov, ' + ' ORDER BY lineitem.l_shipmode),')') AS prov, count(*) cntprov FROM orders INNER JOIN lineitem ON orders.o_orderkey = lineitem.l_orderkey WHERE lineitem.l_shipmode IN ('SHIP', 'MAIL') AND lineitem.l_commitdate < lineitem.l_receiptdate AND lineitem.l_shipdate < lineitem.l_commitdate AND lineitem.l_receiptdate >= date '1996-01-01' AND lineitem.l_receiptdate < date '1996-01-01' + INTERVAL '1' year GROUP BY lineitem.l_shipmode ORDER BY lineitem.l_shipmode",
		"columns": ["lineitem.l_shipmode"],
		"columnsagg": ["high_line_count", "low_line_count"],
		"tables": ["lineitem", "orders"]
	},
	"14":{
		"originalquery": "select customer.c_custkey, count(o_orderkey) count_ from customer left outer join orders on customer.c_custkey = orders.o_custkey and orders.o_comment not like '%unusual%deposits%' group by customer.c_custkey",
		"provenancequery": "SELECT customer.c_custkey, STRING_AGG(CONCAT(COALESCE(customer.prov || ' . ' || orders.prov , customer.prov), ' ⊗ ',  (CASE when o_orderkey IS NULL then '0' else '1' end)), ' +count ' ORDER BY customer.c_custkey) AS count_, CONCAT('δ(',STRING_AGG(COALESCE(customer.prov || ' . ' || orders.prov , customer.prov), ' + ' ORDER BY customer.c_custkey),')') AS prov, count(*) cntprov FROM customer LEFT OUTER JOIN orders ON customer.c_custkey = orders.o_custkey AND orders.o_comment NOT LIKE '%unusual%deposits%' GROUP BY customer.c_custkey",
		"columns": ["customer.c_custkey"],
		"columnsagg": ["count_"],
		"tables": ["customer", "orders"]
	},
	"15":{
		"originalquery": "select c_count, count(*) as custdist from (select customer.c_custkey, count(o_orderkey) from customer left outer join orders on customer.c_custkey = orders.o_custkey and orders.o_comment not like '%unusual%deposits%' group by customer.c_custkey) as c_orders (c_custkey, c_count) group by c_count order by custdist desc, c_count desc",
		"provenancequery": "SELECT c_count, STRING_AGG(CONCAT('(', c_orders.prov, ')', ' ⊗ ', '1'), ' +count ' ORDER BY c_count) AS custdist, CONCAT('δ(', STRING_AGG(c_orders.prov, ' + ' ORDER BY c_count), ')') AS prov, SUM(cntprov) as cntprov FROM (SELECT customer.c_custkey AS c_custkey, STRING_AGG(CONCAT(COALESCE(customer.prov || ' . ' || orders.prov, customer.prov), ' ⊗ ', (CASE when o_orderkey IS NULL then '0' else '1' end)), ' +count ' ORDER BY customer.c_custkey) AS c_count, CONCAT('δ(', STRING_AGG(COALESCE(customer.prov || ' . ' || orders.prov, customer.prov), ' + ' ORDER BY customer.c_custkey), ')') AS prov, count(*) cntprov FROM customer LEFT OUTER JOIN orders ON customer.c_custkey = orders.o_custkey AND orders.o_comment NOT LIKE '%unusual%deposits%' GROUP BY customer.c_custkey) AS c_orders(c_custkey, c_count) GROUP BY c_count, c_orders.cntprov ORDER BY custdist DESC, c_count DESC",
		"columns": [],
		"columnsagg": ["c_count", "custdist"],
		"tables": ["customer", "orders"]
	},
	"16":{
		"originalquery": "select 100.00 * sum(case when part.p_type like 'PROMO%' then lineitem.l_extendedprice * (1 - lineitem.l_discount) else 0 end) / sum(lineitem.l_extendedprice * (1 - lineitem.l_discount)) as promo_revenue from lineitem, part where lineitem.l_partkey = part.p_partkey and lineitem.l_shipdate >= date '1996-10-01' and lineitem.l_shipdate < date '1996-10-01' + interval '1' month;",
		"provenancequery": "SELECT STRING_AGG(CONCAT('(',lineitem.prov || ' . ' || part.prov, ')', ' ⊗ ', CASE WHEN part.p_type LIKE 'PROMO%' THEN lineitem.l_extendedprice * (1 - lineitem.l_discount) ELSE 0 END*100.00), ' +sum ') AS promo_revenue, STRING_AGG(CONCAT('(',lineitem.prov || ' . ' || part.prov, ')', ' ⊗ ', lineitem.l_extendedprice * (1 - lineitem.l_discount)), ' +sum ') AS promo_revenue, CONCAT('δ(',STRING_AGG(lineitem.prov || ' . ' || part.prov, ' + '),')') AS prov, count(*) cntprov FROM lineitem INNER JOIN part ON lineitem.l_partkey = part.p_partkey WHERE lineitem.l_shipdate >= date '1996-10-01' AND lineitem.l_shipdate < date '1996-10-01' + INTERVAL '1' month",
		"columns": [],
		"columnsagg": ["promo_revenue"],
		"tables": ["lineitem", "part"]
	},
	"17":{
		"originalquery": "select supplier.s_suppkey, supplier.s_name, supplier.s_address, supplier.s_phone, revenue0.total_revenue from supplier, revenue0 where supplier.s_suppkey = revenue0.supplier_no and revenue0.total_revenue = (select max(revenue0.total_revenue) from revenue0) order by supplier.s_suppkey;",
		"provenancequery": "SELECT supplier.s_suppkey, supplier.s_name, supplier.s_address, supplier.s_phone, revenue0.total_revenue, supplier.prov || ' . ' || revenue0.prov || ' . ' || '(' || C0.prov || ')'||' . [' || C0.F0|| ' = 1 ⊗' || revenue0.total_revenue|| ']' AS prov FROM supplier INNER JOIN revenue0 ON supplier.s_suppkey = revenue0.supplier_no CROSS JOIN (SELECT STRING_AGG(CONCAT('(',revenue0.prov, ')', ' ⊗ ', revenue0.total_revenue), ' +max ') AS F0, CONCAT('δ(',STRING_AGG(revenue0.prov, ' + '),')') AS prov FROM revenue0) AS C0 ORDER BY supplier.s_suppkey",
		"columns": ["supplier.s_suppkey", "supplier.s_name", "supplier.s_address", "supplier.s_phone", "revenue0.total_revenue"],
		"columnsagg": [],
		"tables": ["supplier", "revenue0"]
	},
	"18":{
		"originalquery": "select part.p_brand, part.p_type, part.p_size, count(distinct partsupp.ps_suppkey) as supplier_cnt from partsupp, part where part.p_partkey = partsupp.ps_partkey and part.p_brand <> 'Brand#52' and part.p_type not like 'STANDARD BRUSHED%' and part.p_size in (44, 31, 46, 26, 49, 29, 34, 38) and partsupp.ps_suppkey not in (select supplier.s_suppkey from supplier where supplier.s_comment like '%Customer%Complaints%') group by part.p_brand, part.p_type, part.p_size order by supplier_cnt desc, part.p_brand, part.p_type, part.p_size;",
		"provenancequery": "SELECT part.p_brand, part.p_type, part.p_size, STRING_AGG(CONCAT(partsupp.prov || ' . ' || part.prov || COALESCE(' . ' || '(' || C0.prov || ')', ''), ' ⊗ ',  (CASE when partsupp.ps_suppkey IS NULL then '0' else '1' end)), ' +count ' ORDER BY part.p_brand) AS supplier_cnt, CONCAT('δ(',STRING_AGG(partsupp.prov || ' . ' || part.prov || COALESCE(' . ' || '(' || C0.prov || ')', ''), ' + ' ORDER BY part.p_brand),')') AS prov FROM partsupp INNER JOIN part ON part.p_partkey = partsupp.ps_partkey LEFT JOIN (SELECT supplier.s_suppkey, supplier.prov AS prov FROM supplier WHERE supplier.s_comment LIKE '%Customer%Complaints%') AS C0 ON partsupp.ps_suppkey = C0.s_suppkey WHERE part.p_brand <> 'Brand#52' AND part.p_type NOT LIKE 'STANDARD BRUSHED%' AND part.p_size IN (44, 31, 46, 26, 49, 29, 34, 38) AND C0.s_suppkey IS NULL GROUP BY part.p_brand, part.p_type, part.p_size ORDER BY supplier_cnt DESC, part.p_brand, part.p_type, part.p_size",
		"columns": [ "part.p_brand"," part.p_type", "part.p_size"],
		"columnsagg": ["supplier_cnt"],
		"tables": ["partsupp", "part"]
	},
	"19":{
		"originalquery": "select sum(lineitem.l_extendedprice) / 7.0 as avg_yearly from lineitem, part where part.p_partkey = lineitem.l_partkey and part.p_brand = 'Brand#21' and part.p_container = 'WRAP BAG' and lineitem.l_quantity < (select 0.2 * avg(lineitem.l_quantity) from lineitem where lineitem.l_partkey = part.p_partkey);",
		"provenancequery": "SELECT STRING_AGG(CONCAT(lineitem.prov || ' . ' || part.prov || ' . ' || '(' || C0.prov || ')', ' ⊗ ', lineitem.l_extendedprice / 7.0), ' +sum ') AS avg_yearly, CONCAT('δ(', STRING_AGG(lineitem.prov || ' . ' || part.prov || ' . ' || '(' || C0.prov || ')' || ' . [' || C0.F0 || ' > 1 ⊗' || lineitem.l_quantity || ']', ' + '), ')') AS prov, SUM(C0.cntprov) as cntprov FROM lineitem INNER JOIN part ON part.p_partkey = lineitem.l_partkey INNER JOIN (SELECT lineitem.l_partkey, REPLACE(STRING_AGG(CONCAT(lineitem.prov, ' ⊗ ', lineitem.l_quantity * 0.2, '/avgt'), ' +avg '), 'avgt', CAST(COUNT(*) AS VARCHAR)) AS F0, CONCAT('δ(', STRING_AGG(lineitem.prov, ' + '), ')') AS prov, COUNT(*) as cntprov FROM lineitem GROUP BY lineitem.l_partkey) AS C0 ON C0.l_partkey = part.p_partkey WHERE part.p_brand = 'Brand#21' AND part.p_container = 'WRAP BAG';",
		"columns": [],
		"columnsagg": ["avg_yearly"],
		"tables": ["lineitem", "part"]
	},
	"20":{
		"originalquery": "select customer.c_name, customer.c_custkey, orders.o_orderkey, orders.o_orderdate, orders.o_totalprice, sum(lineitem.l_quantity) as sum_ from customer, orders, lineitem where orders.o_orderkey in ( select lineitem.l_orderkey from lineitem group by lineitem.l_orderkey having sum(lineitem.l_quantity) > 214 ) and customer.c_custkey = orders.o_custkey and orders.o_orderkey = lineitem.l_orderkey group by customer.c_name, customer.c_custkey, orders.o_orderkey, orders.o_orderdate, orders.o_totalprice order by orders.o_totalprice desc, orders.o_orderdate LIMIT 100",
		"provenancequery": "SELECT customer.c_name, customer.c_custkey, orders.o_orderkey, orders.o_orderdate, orders.o_totalprice, STRING_AGG(CONCAT('(', customer.prov || ' . ' || orders.prov || ' . ' || lineitem.prov || ' . ' || '(' || C0.prov || ')', ')', ' ⊗ ', lineitem.l_quantity), ' +sum ' ORDER BY customer.c_name) AS sum_, CONCAT('δ(', STRING_AGG(customer.prov || ' . ' || orders.prov || ' . ' || lineitem.prov || ' . ' || '(' || C0.prov || ')', ' + ' ORDER BY customer.c_name), ')') AS prov, sum(c0.cntprov) cntprov FROM customer INNER JOIN orders ON customer.c_custkey = orders.o_custkey INNER JOIN lineitem ON orders.o_orderkey = lineitem.l_orderkey INNER JOIN (SELECT lineitem.l_orderkey, CONCAT('δ(', STRING_AGG(lineitem.prov, ' + ' ORDER BY lineitem.l_orderkey), ') . [', STRING_AGG(CONCAT(lineitem.prov, ' ⊗ ', lineitem.l_quantity), ' +sum ' ORDER BY lineitem.l_orderkey), ' > 214]') AS prov, count(*) cntprov FROM lineitem GROUP BY lineitem.l_orderkey) AS C0 ON orders.o_orderkey = C0.l_orderkey GROUP BY customer.c_name, customer.c_custkey, orders.o_orderkey, orders.o_orderdate, orders.o_totalprice ORDER BY orders.o_totalprice DESC, orders.o_orderdate LIMIT 100",
		"columns": ["customer.c_name", "customer.c_custkey"," orders.o_orderkey", "orders.o_orderdate", "orders.o_totalprice"],
		"columnsagg": ["sum_"],
		"tables": ["customer", "orders", "lineitem"]
	},
	"21":{
		"originalquery": "select sum(lineitem.l_extendedprice* (1 - lineitem.l_discount)) as revenue from lineitem, part where (part.p_partkey = lineitem.l_partkey and part.p_brand = 'Brand#53' and part.p_container in ('SM CASE', 'SM BOX', 'SM PACK', 'SM PKG') and lineitem.l_quantity >= 7 and lineitem.l_quantity <= 7 + 10 and part.p_size between 1 and 5 and lineitem.l_shipmode in ('AIR', 'AIR REG') and lineitem.l_shipinstruct = 'DELIVER IN PERSON') or (part.p_partkey = lineitem.l_partkey and part.p_brand = 'Brand#53' and part.p_container in ('MED BAG', 'MED BOX', 'MED PKG', 'MED PACK') and lineitem.l_quantity >= 17 and lineitem.l_quantity <= 17 + 10 and part.p_size between 1 and 10 and lineitem.l_shipmode in ('AIR', 'AIR REG') and lineitem.l_shipinstruct = 'DELIVER IN PERSON') or (part.p_partkey = lineitem.l_partkey and part.p_brand = 'Brand#53' and part.p_container in ('LG CASE', 'LG BOX', 'LG PACK', 'LG PKG') and lineitem.l_quantity >= 20 and lineitem.l_quantity <= 20 + 10 and part.p_size between 1 and 15 and lineitem.l_shipmode in ('AIR', 'AIR REG') and lineitem.l_shipinstruct = 'DELIVER IN PERSON')",
		"provenancequery": "SELECT STRING_AGG(CONCAT('(',lineitem.prov || ' . ' || part.prov, ')', ' ⊗ ', lineitem.l_extendedprice * (1 - lineitem.l_discount)), ' +sum ') AS revenue, CONCAT('δ(',STRING_AGG(lineitem.prov || ' . ' || part.prov, ' + '),')') AS prov, count(*) cntprov FROM lineitem INNER JOIN part ON part.p_partkey = lineitem.l_partkey WHERE (part.p_brand = 'Brand#53' AND part.p_container IN ('SM CASE', 'SM BOX', 'SM PACK', 'SM PKG') AND lineitem.l_quantity >= 7 AND lineitem.l_quantity <= 7 + 10 AND part.p_size BETWEEN 1 AND 5 AND lineitem.l_shipmode IN ('AIR', 'AIR REG') AND lineitem.l_shipinstruct = 'DELIVER IN PERSON') OR (part.p_brand = 'Brand#53' AND part.p_container IN ('MED BAG', 'MED BOX', 'MED PKG', 'MED PACK') AND lineitem.l_quantity >= 17 AND lineitem.l_quantity <= 17 + 10 AND part.p_size BETWEEN 1 AND 10 AND lineitem.l_shipmode IN ('AIR', 'AIR REG') AND lineitem.l_shipinstruct = 'DELIVER IN PERSON') OR (part.p_brand = 'Brand#53' AND part.p_container IN ('LG CASE', 'LG BOX', 'LG PACK', 'LG PKG') AND lineitem.l_quantity >= 20 AND lineitem.l_quantity <= 20 + 10 AND part.p_size BETWEEN 1 AND 15 AND lineitem.l_shipmode IN ('AIR', 'AIR REG') AND lineitem.l_shipinstruct = 'DELIVER IN PERSON')",
		"columns": [],
		"columnsagg": ["revenue"],
		"tables": ["part", "lineitem"]
	}, 
	"22":{
		"originalquery": "select supplier.s_name, supplier.s_address from supplier, nation where supplier.s_suppkey in (select partsupp.ps_suppkey from partsupp where partsupp.ps_partkey in (select part.p_partkey from part where part.p_name like 'moccasin%') and partsupp.ps_availqty > (select 0.5 * sum(lineitem.l_quantity) from lineitem where lineitem.l_partkey = partsupp.ps_partkey and lineitem.l_suppkey = partsupp.ps_suppkey and lineitem.l_shipdate >= date '1997-01-01' and lineitem.l_shipdate < date '1997-01-01' + interval '1' year)) and supplier.s_nationkey = nation.n_nationkey and nation.n_name = 'JAPAN' order by supplier.s_name;",
		"provenancequery": "SELECT supplier.s_name, supplier.s_address, supplier.prov || ' . ' || nation.prov || ' . ' || '(' || C3.prov || ')' AS prov, cntprov FROM supplier INNER JOIN nation ON supplier.s_nationkey = nation.n_nationkey INNER JOIN (SELECT partsupp.ps_suppkey, SUM(C1.cntprov) cntprov, string_agg(partsupp.prov || ' . ' || '(' || C1.prov || ')' || ' . [' || C1.col0 || ' < 1 ⊗' || partsupp.ps_availqty || ']' || ' . ' || '(' || C0.prov || ')', ' + ') AS prov FROM partsupp INNER JOIN (SELECT lineitem.l_partkey, lineitem.l_suppkey, STRING_AGG(CONCAT('(', lineitem.prov, ')', ' ⊗ ', lineitem.l_quantity * 0.5), ' +sum ') AS col0, CONCAT('δ(', STRING_AGG(lineitem.prov, ' + '), ')') AS prov, COUNT(*) cntprov FROM lineitem WHERE lineitem.l_shipdate >= date '1997-01-01' AND lineitem.l_shipdate < date '1997-01-01' + INTERVAL '1' year GROUP BY lineitem.l_partkey, lineitem.l_suppkey) AS C1 ON C1.l_partkey = partsupp.ps_partkey AND C1.l_suppkey = partsupp.ps_suppkey INNER JOIN (SELECT part.p_partkey, CONCAT('δ(', STRING_AGG(part.prov, ' + '), ')') AS prov, count(*) cntprov FROM part WHERE part.p_name LIKE 'moccasin%' GROUP BY part.p_partkey) AS C0 ON partsupp.ps_partkey = C0.p_partkey GROUP BY partsupp.ps_suppkey) AS C3 ON supplier.s_suppkey = C3.ps_suppkey WHERE nation.n_name = 'JAPAN' ORDER BY supplier.s_name",
		"columns": ["supplier.s_name", "supplier.s_address"],
		"columnsagg": [],
		"tables": ["supplier", "part", "partsupp", "lineitem", "nation"]
	},
	"23":{
		"originalquery": "select supplier.s_name, count(*) as numwait from supplier, lineitem l1, orders, nation where supplier.s_suppkey = l1.l_suppkey and orders.o_orderkey = l1.l_orderkey and orders.o_orderstatus = 'F' and l1.l_receiptdate > l1.l_commitdate and exists (select * from lineitem l2 where l2.l_orderkey = l1.l_orderkey and l2.l_suppkey <> l1.l_suppkey) and not exists (select * from lineitem l3 where l3.l_orderkey = l1.l_orderkey and l3.l_suppkey <> l1.l_suppkey and l3.l_receiptdate > l3.l_commitdate) and supplier.s_nationkey = n_nationkey and nation.n_name = 'RUSSIA' group by supplier.s_name order by numwait desc, supplier.s_name LIMIT 100;",
		"provenancequery": "SELECT supplier.s_name, STRING_AGG(CONCAT('(',supplier.prov || ' . ' || l1.prov || ' . ' || orders.prov || ' . ' || nation.prov || COALESCE(' . ' || '(' || C1.prov || ')', '') || ' . ' || '(' || C0.prov || ')', ')', ' ⊗ ', '1'), ' +count ' ORDER BY supplier.s_name) AS numwait, CONCAT('δ(',STRING_AGG(supplier.prov || ' . ' || l1.prov || ' . ' || orders.prov || ' . ' || nation.prov || COALESCE(' . ' || '(' || C1.prov || ')', '') || ' . ' || '(' || C0.prov || ')', ' + ' ORDER BY supplier.s_name),')') AS prov,  SUM(cnt1) cntprov FROM supplier INNER JOIN lineitem l1 ON supplier.s_suppkey = l1.l_suppkey INNER JOIN orders ON orders.o_orderkey = l1.l_orderkey INNER JOIN nation ON supplier.s_nationkey = nation.n_nationkey LEFT JOIN (SELECT l3.l_orderkey, l3.l_suppkey, l3.prov AS prov FROM lineitem l3 WHERE l3.l_receiptdate > l3.l_commitdate) AS C1 ON C1.l_orderkey = l1.l_orderkey AND C1.l_suppkey <> l1.l_suppkey INNER JOIN (SELECT nestedT0_2.l_orderkey, nestedT0_2.l_suppkey, SUM(nestedT0_2.cnt1) cnt1, CASE WHEN nestedT0_2.cnt1 < nestedT0_2.cnt2 THEN nestedT0_2.prov ELSE STRING_AGG(nestedT0_2.prov, ' + ' ORDER BY nestedT0_2.l_orderkey) END AS prov FROM (SELECT nestedT0.l_orderkey, nestedT0.l_suppkey, STRING_AGG(l2.prov, ' + ' ORDER BY nestedT0.l_orderkey) AS prov, COUNT(*) AS cnt1, COUNT(*) OVER (PARTITION BY nestedT0.l_orderkey, nestedT0.l_suppkey ) AS cnt2 FROM lineitem l2 INNER JOIN lineitem AS nestedT0 ON l2.l_orderkey = nestedT0.l_orderkey AND l2.l_suppkey <> nestedT0.l_suppkey GROUP BY nestedT0.l_orderkey, nestedT0.l_suppkey, nestedT0.prov) AS nestedT0_2 GROUP BY nestedT0_2.l_orderkey, nestedT0_2.l_suppkey, nestedT0_2.cnt1, nestedT0_2.cnt2, nestedT0_2.prov) AS C0 ON C0.l_orderkey = l1.l_orderkey AND C0.l_suppkey = l1.l_suppkey WHERE orders.o_orderstatus = 'F' AND l1.l_receiptdate > l1.l_commitdate AND nation.n_name = 'RUSSIA' AND C1.l_orderkey IS NULL AND C1.l_suppkey IS NULL GROUP BY supplier.s_name ORDER BY numwait DESC, supplier.s_name LIMIT 100",
		"columns": ["supplier.s_name"],
		"columnsagg": ["numwait"],
		"tables": ["supplier", "orders", "lineitem", "lineitem"]
	},"24":{
		"originalquery": "select cntrycode, count(*) as numcust, sum(c_acctbal) as totacctbal from (select substring(c_phone from 1 for 2) as cntrycode, customer.c_acctbal from customer where substring(c_phone from 1 for 2) in ('22', '34', '24', '26', '28', '15', '21') and customer.c_acctbal > (select avg(customer.c_acctbal) from customer where customer.c_acctbal > 0.00 and substring(customer.c_phone from 1 for 2) in ('22', '34', '24', '26', '28', '15', '21')) and not exists (select * from orders where orders.o_custkey = customer.c_custkey)) as custsale group by cntrycode order by cntrycode;",
		"provenancequery": "SELECT cntrycode, STRING_AGG(CONCAT('(',custsale.prov,')', ' ⊗ ', '1'), ' +count ' ORDER BY cntrycode) AS numcust, STRING_AGG(CONCAT('(',custsale.prov, ')', ' ⊗ ', c_acctbal), ' +sum ' ORDER BY cntrycode) AS totacctbal, CONCAT('δ(',STRING_AGG(custsale.prov  , ' + ' ORDER BY cntrycode),')') AS prov, SUM(cntprov) cntprov FROM (SELECT substring(c_phone from 1 for 2) AS cntrycode, customer.c_acctbal, customer.prov || ' . ' || '(' || C0.prov || ')'||' . [' || C0.col0|| ' < 1 ⊗' || customer.c_acctbal|| ']' AS prov, COUNT(*) cntprov FROM customer LEFT JOIN (SELECT orders.o_custkey, orders.prov AS prov FROM orders) AS C2 ON C2.o_custkey = customer.c_custkey CROSS JOIN (SELECT REPLACE(STRING_AGG(CONCAT(customer.prov, ' ⊗ ', customer.c_acctbal,'/avgt'), ' +avg '), 'avgt', CAST(COUNT(*) AS VARCHAR)) AS col0, CONCAT('δ(',STRING_AGG(customer.prov, ' + '),')') AS prov FROM customer WHERE customer.c_acctbal > 0.00 AND substring(customer.c_phone from 1 for 2) IN ('22', '34', '24', '26', '28', '15', '21')) AS C0 WHERE substring(c_phone from 1 for 2) IN ('22', '34', '24', '26', '28', '15', '21') AND C2.o_custkey IS NULL) AS custsale GROUP BY cntrycode ORDER BY cntrycode",
		"columns": ["substring(c_phone from 1 for 2) as cntrycode"],
		"columnsagg": ["numcust", "totacctbal"],
		"tables": ["customer", "orders"]
	}
  }